// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

export namespace tenants {
    export interface Tenant {
        /**
         * SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
         */
        authQuery?: string;
        /**
         * Database name
         */
        dbDatabase: string;
        /**
         * Database host
         */
        dbHost: string;
        /**
         * Database port
         */
        dbPort: number;
        enforceSsl?: boolean;
        /**
         * External ID
         */
        externalId?: string;
        id?: string;
        insertedAt?: string;
        /**
         * auto
         */
        ipVersion?: string;
        requireUser?: boolean;
        /**
         * your.domain.com
         */
        sniHostname?: string;
        updatedAt?: string;
        upstreamSsl?: boolean;
        /**
         * none
         */
        upstreamVerify?: string;
        users: outputs.tenants.User[];
    }
    /**
     * tenantProvideDefaults sets the appropriate defaults for Tenant
     */
    export function tenantProvideDefaults(val: Tenant): Tenant {
        return {
            ...val,
            enforceSsl: (val.enforceSsl) ?? false,
            requireUser: (val.requireUser) ?? false,
            upstreamSsl: (val.upstreamSsl) ?? true,
        };
    }

    export interface TenantProperties {
        /**
         * List of CIDR addresses
         */
        allowList?: string[];
        /**
         * SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
         */
        authQuery?: string;
        /**
         * Database name
         */
        dbDatabase: string;
        /**
         * Database host
         */
        dbHost: string;
        /**
         * Database port
         */
        dbPort: number;
        enforceSsl?: boolean;
        /**
         * External ID
         */
        externalId?: string;
        id?: string;
        insertedAt?: string;
        /**
         * auto
         */
        ipVersion?: string;
        requireUser: boolean;
        /**
         * your.domain.com
         */
        sniHostname?: string;
        updatedAt?: string;
        upstreamSsl?: boolean;
        /**
         * none
         */
        upstreamVerify?: string;
        users: outputs.tenants.User[];
    }
    /**
     * tenantPropertiesProvideDefaults sets the appropriate defaults for TenantProperties
     */
    export function tenantPropertiesProvideDefaults(val: TenantProperties): TenantProperties {
        return {
            ...val,
            enforceSsl: (val.enforceSsl) ?? false,
            requireUser: (val.requireUser) ?? false,
            upstreamSsl: (val.upstreamSsl) ?? true,
        };
    }

    export interface User {
        /**
         * Database password
         */
        dbPassword: string;
        /**
         * Database user
         */
        dbUser: string;
        /**
         * Database user alias
         */
        dbUserAlias?: string;
        id?: string;
        insertedAt?: string;
        /**
         * The users who can be used for internal needs
         */
        isManager?: boolean;
        /**
         * Max clients count
         */
        maxClients?: number;
        /**
         * Pooling mode type
         */
        modeType?: string;
        /**
         * Pool checkout timeout
         */
        poolCheckoutTimeout?: number;
        /**
         * Pool size
         */
        poolSize: number;
        /**
         * External Tenant ID
         */
        tenantExternalId?: string;
        updatedAt?: string;
    }

}
