// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tenants

import (
	"context"
	"reflect"

	"errors"
	"github.com/phillarson-xyz/pulumi-supavisor-native/sdk/go/supavisor-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Tenant struct {
	pulumi.CustomResourceState

	// SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
	AuthQuery pulumi.StringPtrOutput `pulumi:"authQuery"`
	// Database name
	DbDatabase pulumi.StringOutput `pulumi:"dbDatabase"`
	// Database host
	DbHost pulumi.StringOutput `pulumi:"dbHost"`
	// Database port
	DbPort     pulumi.IntOutput     `pulumi:"dbPort"`
	EnforceSsl pulumi.BoolPtrOutput `pulumi:"enforceSsl"`
	// External ID
	ExternalId pulumi.StringPtrOutput `pulumi:"externalId"`
	InsertedAt pulumi.StringPtrOutput `pulumi:"insertedAt"`
	// auto
	IpVersion   pulumi.StringPtrOutput `pulumi:"ipVersion"`
	RequireUser pulumi.BoolPtrOutput   `pulumi:"requireUser"`
	// your.domain.com
	SniHostname pulumi.StringPtrOutput `pulumi:"sniHostname"`
	Tenant      TenantPropertiesOutput `pulumi:"tenant"`
	UpdatedAt   pulumi.StringPtrOutput `pulumi:"updatedAt"`
	UpstreamSsl pulumi.BoolPtrOutput   `pulumi:"upstreamSsl"`
	// none
	UpstreamVerify pulumi.StringPtrOutput `pulumi:"upstreamVerify"`
	Users          UserArrayOutput        `pulumi:"users"`
}

// NewTenant registers a new resource with the given unique name, arguments, and options.
func NewTenant(ctx *pulumi.Context,
	name string, args *TenantArgs, opts ...pulumi.ResourceOption) (*Tenant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Tenant == nil {
		return nil, errors.New("invalid value for required argument 'Tenant'")
	}
	args.Tenant = args.Tenant.ToTenantPropertiesOutput().ApplyT(func(v TenantProperties) TenantProperties { return *v.Defaults() }).(TenantPropertiesOutput)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tenant
	err := ctx.RegisterResource("supavisor-native:tenants:Tenant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenant gets an existing Tenant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantState, opts ...pulumi.ResourceOption) (*Tenant, error) {
	var resource Tenant
	err := ctx.ReadResource("supavisor-native:tenants:Tenant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tenant resources.
type tenantState struct {
}

type TenantState struct {
}

func (TenantState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantState)(nil)).Elem()
}

type tenantArgs struct {
	// External ID of the tenant
	ExternalId *string          `pulumi:"externalId"`
	Tenant     TenantProperties `pulumi:"tenant"`
}

// The set of arguments for constructing a Tenant resource.
type TenantArgs struct {
	// External ID of the tenant
	ExternalId pulumi.StringPtrInput
	Tenant     TenantPropertiesInput
}

func (TenantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantArgs)(nil)).Elem()
}

type TenantInput interface {
	pulumi.Input

	ToTenantOutput() TenantOutput
	ToTenantOutputWithContext(ctx context.Context) TenantOutput
}

func (*Tenant) ElementType() reflect.Type {
	return reflect.TypeOf((**Tenant)(nil)).Elem()
}

func (i *Tenant) ToTenantOutput() TenantOutput {
	return i.ToTenantOutputWithContext(context.Background())
}

func (i *Tenant) ToTenantOutputWithContext(ctx context.Context) TenantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantOutput)
}

type TenantOutput struct{ *pulumi.OutputState }

func (TenantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tenant)(nil)).Elem()
}

func (o TenantOutput) ToTenantOutput() TenantOutput {
	return o
}

func (o TenantOutput) ToTenantOutputWithContext(ctx context.Context) TenantOutput {
	return o
}

// SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
func (o TenantOutput) AuthQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringPtrOutput { return v.AuthQuery }).(pulumi.StringPtrOutput)
}

// Database name
func (o TenantOutput) DbDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.DbDatabase }).(pulumi.StringOutput)
}

// Database host
func (o TenantOutput) DbHost() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.DbHost }).(pulumi.StringOutput)
}

// Database port
func (o TenantOutput) DbPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntOutput { return v.DbPort }).(pulumi.IntOutput)
}

func (o TenantOutput) EnforceSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.BoolPtrOutput { return v.EnforceSsl }).(pulumi.BoolPtrOutput)
}

// External ID
func (o TenantOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringPtrOutput { return v.ExternalId }).(pulumi.StringPtrOutput)
}

func (o TenantOutput) InsertedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringPtrOutput { return v.InsertedAt }).(pulumi.StringPtrOutput)
}

// auto
func (o TenantOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringPtrOutput { return v.IpVersion }).(pulumi.StringPtrOutput)
}

func (o TenantOutput) RequireUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.BoolPtrOutput { return v.RequireUser }).(pulumi.BoolPtrOutput)
}

// your.domain.com
func (o TenantOutput) SniHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringPtrOutput { return v.SniHostname }).(pulumi.StringPtrOutput)
}

func (o TenantOutput) Tenant() TenantPropertiesOutput {
	return o.ApplyT(func(v *Tenant) TenantPropertiesOutput { return v.Tenant }).(TenantPropertiesOutput)
}

func (o TenantOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringPtrOutput { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func (o TenantOutput) UpstreamSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.BoolPtrOutput { return v.UpstreamSsl }).(pulumi.BoolPtrOutput)
}

// none
func (o TenantOutput) UpstreamVerify() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringPtrOutput { return v.UpstreamVerify }).(pulumi.StringPtrOutput)
}

func (o TenantOutput) Users() UserArrayOutput {
	return o.ApplyT(func(v *Tenant) UserArrayOutput { return v.Users }).(UserArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInput)(nil)).Elem(), &Tenant{})
	pulumi.RegisterOutputType(TenantOutput{})
}
