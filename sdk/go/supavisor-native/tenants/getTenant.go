// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tenants

import (
	"context"
	"reflect"

	"github.com/phillarson-xyz/pulumi-supavisor-native/sdk/go/supavisor-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupTenant(ctx *pulumi.Context, args *LookupTenantArgs, opts ...pulumi.InvokeOption) (*LookupTenantResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTenantResult
	err := ctx.Invoke("supavisor-native:tenants:getTenant", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupTenantArgs struct {
	// External ID of the tenant
	ExternalId string `pulumi:"externalId"`
}

type LookupTenantResult struct {
	// SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
	AuthQuery *string `pulumi:"authQuery"`
	// Database name
	DbDatabase string `pulumi:"dbDatabase"`
	// Database host
	DbHost string `pulumi:"dbHost"`
	// Database port
	DbPort     int   `pulumi:"dbPort"`
	EnforceSsl *bool `pulumi:"enforceSsl"`
	// External ID
	ExternalId *string `pulumi:"externalId"`
	Id         *string `pulumi:"id"`
	InsertedAt *string `pulumi:"insertedAt"`
	// auto
	IpVersion   *string `pulumi:"ipVersion"`
	RequireUser *bool   `pulumi:"requireUser"`
	// your.domain.com
	SniHostname *string `pulumi:"sniHostname"`
	UpdatedAt   *string `pulumi:"updatedAt"`
	UpstreamSsl *bool   `pulumi:"upstreamSsl"`
	// none
	UpstreamVerify *string `pulumi:"upstreamVerify"`
	Users          []User  `pulumi:"users"`
}

// Defaults sets the appropriate defaults for LookupTenantResult
func (val *LookupTenantResult) Defaults() *LookupTenantResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnforceSsl == nil {
		enforceSsl_ := false
		tmp.EnforceSsl = &enforceSsl_
	}
	if tmp.RequireUser == nil {
		requireUser_ := false
		tmp.RequireUser = &requireUser_
	}
	if tmp.UpstreamSsl == nil {
		upstreamSsl_ := true
		tmp.UpstreamSsl = &upstreamSsl_
	}
	return &tmp
}
func LookupTenantOutput(ctx *pulumi.Context, args LookupTenantOutputArgs, opts ...pulumi.InvokeOption) LookupTenantResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTenantResultOutput, error) {
			args := v.(LookupTenantArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("supavisor-native:tenants:getTenant", args, LookupTenantResultOutput{}, options).(LookupTenantResultOutput), nil
		}).(LookupTenantResultOutput)
}

type LookupTenantOutputArgs struct {
	// External ID of the tenant
	ExternalId pulumi.StringInput `pulumi:"externalId"`
}

func (LookupTenantOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTenantArgs)(nil)).Elem()
}

type LookupTenantResultOutput struct{ *pulumi.OutputState }

func (LookupTenantResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTenantResult)(nil)).Elem()
}

func (o LookupTenantResultOutput) ToLookupTenantResultOutput() LookupTenantResultOutput {
	return o
}

func (o LookupTenantResultOutput) ToLookupTenantResultOutputWithContext(ctx context.Context) LookupTenantResultOutput {
	return o
}

// SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
func (o LookupTenantResultOutput) AuthQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTenantResult) *string { return v.AuthQuery }).(pulumi.StringPtrOutput)
}

// Database name
func (o LookupTenantResultOutput) DbDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTenantResult) string { return v.DbDatabase }).(pulumi.StringOutput)
}

// Database host
func (o LookupTenantResultOutput) DbHost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTenantResult) string { return v.DbHost }).(pulumi.StringOutput)
}

// Database port
func (o LookupTenantResultOutput) DbPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTenantResult) int { return v.DbPort }).(pulumi.IntOutput)
}

func (o LookupTenantResultOutput) EnforceSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupTenantResult) *bool { return v.EnforceSsl }).(pulumi.BoolPtrOutput)
}

// External ID
func (o LookupTenantResultOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTenantResult) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

func (o LookupTenantResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTenantResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupTenantResultOutput) InsertedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTenantResult) *string { return v.InsertedAt }).(pulumi.StringPtrOutput)
}

// auto
func (o LookupTenantResultOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTenantResult) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

func (o LookupTenantResultOutput) RequireUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupTenantResult) *bool { return v.RequireUser }).(pulumi.BoolPtrOutput)
}

// your.domain.com
func (o LookupTenantResultOutput) SniHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTenantResult) *string { return v.SniHostname }).(pulumi.StringPtrOutput)
}

func (o LookupTenantResultOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTenantResult) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func (o LookupTenantResultOutput) UpstreamSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupTenantResult) *bool { return v.UpstreamSsl }).(pulumi.BoolPtrOutput)
}

// none
func (o LookupTenantResultOutput) UpstreamVerify() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTenantResult) *string { return v.UpstreamVerify }).(pulumi.StringPtrOutput)
}

func (o LookupTenantResultOutput) Users() UserArrayOutput {
	return o.ApplyT(func(v LookupTenantResult) []User { return v.Users }).(UserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTenantResultOutput{})
}
