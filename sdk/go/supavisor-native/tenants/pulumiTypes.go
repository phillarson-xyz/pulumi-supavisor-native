// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tenants

import (
	"context"
	"reflect"

	"github.com/phillarson-xyz/pulumi-supavisor-native/sdk/go/supavisor-native/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type TenantType struct {
	// SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
	AuthQuery *string `pulumi:"authQuery"`
	// Database name
	DbDatabase string `pulumi:"dbDatabase"`
	// Database host
	DbHost string `pulumi:"dbHost"`
	// Database port
	DbPort     int   `pulumi:"dbPort"`
	EnforceSsl *bool `pulumi:"enforceSsl"`
	// External ID
	ExternalId *string `pulumi:"externalId"`
	Id         *string `pulumi:"id"`
	InsertedAt *string `pulumi:"insertedAt"`
	// auto
	IpVersion   *string `pulumi:"ipVersion"`
	RequireUser *bool   `pulumi:"requireUser"`
	// your.domain.com
	SniHostname *string `pulumi:"sniHostname"`
	UpdatedAt   *string `pulumi:"updatedAt"`
	UpstreamSsl *bool   `pulumi:"upstreamSsl"`
	// none
	UpstreamVerify *string `pulumi:"upstreamVerify"`
	Users          []User  `pulumi:"users"`
}

// Defaults sets the appropriate defaults for TenantType
func (val *TenantType) Defaults() *TenantType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnforceSsl == nil {
		enforceSsl_ := false
		tmp.EnforceSsl = &enforceSsl_
	}
	if tmp.RequireUser == nil {
		requireUser_ := false
		tmp.RequireUser = &requireUser_
	}
	if tmp.UpstreamSsl == nil {
		upstreamSsl_ := true
		tmp.UpstreamSsl = &upstreamSsl_
	}
	return &tmp
}

type TenantTypeOutput struct{ *pulumi.OutputState }

func (TenantTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantType)(nil)).Elem()
}

func (o TenantTypeOutput) ToTenantTypeOutput() TenantTypeOutput {
	return o
}

func (o TenantTypeOutput) ToTenantTypeOutputWithContext(ctx context.Context) TenantTypeOutput {
	return o
}

// SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
func (o TenantTypeOutput) AuthQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantType) *string { return v.AuthQuery }).(pulumi.StringPtrOutput)
}

// Database name
func (o TenantTypeOutput) DbDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v TenantType) string { return v.DbDatabase }).(pulumi.StringOutput)
}

// Database host
func (o TenantTypeOutput) DbHost() pulumi.StringOutput {
	return o.ApplyT(func(v TenantType) string { return v.DbHost }).(pulumi.StringOutput)
}

// Database port
func (o TenantTypeOutput) DbPort() pulumi.IntOutput {
	return o.ApplyT(func(v TenantType) int { return v.DbPort }).(pulumi.IntOutput)
}

func (o TenantTypeOutput) EnforceSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TenantType) *bool { return v.EnforceSsl }).(pulumi.BoolPtrOutput)
}

// External ID
func (o TenantTypeOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantType) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

func (o TenantTypeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantType) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o TenantTypeOutput) InsertedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantType) *string { return v.InsertedAt }).(pulumi.StringPtrOutput)
}

// auto
func (o TenantTypeOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantType) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

func (o TenantTypeOutput) RequireUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TenantType) *bool { return v.RequireUser }).(pulumi.BoolPtrOutput)
}

// your.domain.com
func (o TenantTypeOutput) SniHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantType) *string { return v.SniHostname }).(pulumi.StringPtrOutput)
}

func (o TenantTypeOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantType) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func (o TenantTypeOutput) UpstreamSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TenantType) *bool { return v.UpstreamSsl }).(pulumi.BoolPtrOutput)
}

// none
func (o TenantTypeOutput) UpstreamVerify() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantType) *string { return v.UpstreamVerify }).(pulumi.StringPtrOutput)
}

func (o TenantTypeOutput) Users() UserArrayOutput {
	return o.ApplyT(func(v TenantType) []User { return v.Users }).(UserArrayOutput)
}

type TenantProperties struct {
	// List of CIDR addresses
	AllowList []string `pulumi:"allowList"`
	// SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
	AuthQuery *string `pulumi:"authQuery"`
	// Database name
	DbDatabase string `pulumi:"dbDatabase"`
	// Database host
	DbHost string `pulumi:"dbHost"`
	// Database port
	DbPort     int   `pulumi:"dbPort"`
	EnforceSsl *bool `pulumi:"enforceSsl"`
	// External ID
	ExternalId *string `pulumi:"externalId"`
	Id         *string `pulumi:"id"`
	InsertedAt *string `pulumi:"insertedAt"`
	// auto
	IpVersion   *string `pulumi:"ipVersion"`
	RequireUser bool    `pulumi:"requireUser"`
	// your.domain.com
	SniHostname *string `pulumi:"sniHostname"`
	UpdatedAt   *string `pulumi:"updatedAt"`
	UpstreamSsl *bool   `pulumi:"upstreamSsl"`
	// none
	UpstreamVerify *string `pulumi:"upstreamVerify"`
	Users          []User  `pulumi:"users"`
}

// Defaults sets the appropriate defaults for TenantProperties
func (val *TenantProperties) Defaults() *TenantProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnforceSsl == nil {
		enforceSsl_ := false
		tmp.EnforceSsl = &enforceSsl_
	}
	if internal.IsZero(tmp.RequireUser) {
		tmp.RequireUser = false
	}
	if tmp.UpstreamSsl == nil {
		upstreamSsl_ := true
		tmp.UpstreamSsl = &upstreamSsl_
	}
	return &tmp
}

// TenantPropertiesInput is an input type that accepts TenantPropertiesArgs and TenantPropertiesOutput values.
// You can construct a concrete instance of `TenantPropertiesInput` via:
//
//	TenantPropertiesArgs{...}
type TenantPropertiesInput interface {
	pulumi.Input

	ToTenantPropertiesOutput() TenantPropertiesOutput
	ToTenantPropertiesOutputWithContext(context.Context) TenantPropertiesOutput
}

type TenantPropertiesArgs struct {
	// List of CIDR addresses
	AllowList pulumi.StringArrayInput `pulumi:"allowList"`
	// SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
	AuthQuery pulumi.StringPtrInput `pulumi:"authQuery"`
	// Database name
	DbDatabase pulumi.StringInput `pulumi:"dbDatabase"`
	// Database host
	DbHost pulumi.StringInput `pulumi:"dbHost"`
	// Database port
	DbPort     pulumi.IntInput     `pulumi:"dbPort"`
	EnforceSsl pulumi.BoolPtrInput `pulumi:"enforceSsl"`
	// External ID
	ExternalId pulumi.StringPtrInput `pulumi:"externalId"`
	Id         pulumi.StringPtrInput `pulumi:"id"`
	InsertedAt pulumi.StringPtrInput `pulumi:"insertedAt"`
	// auto
	IpVersion   pulumi.StringPtrInput `pulumi:"ipVersion"`
	RequireUser pulumi.BoolInput      `pulumi:"requireUser"`
	// your.domain.com
	SniHostname pulumi.StringPtrInput `pulumi:"sniHostname"`
	UpdatedAt   pulumi.StringPtrInput `pulumi:"updatedAt"`
	UpstreamSsl pulumi.BoolPtrInput   `pulumi:"upstreamSsl"`
	// none
	UpstreamVerify pulumi.StringPtrInput `pulumi:"upstreamVerify"`
	Users          UserArrayInput        `pulumi:"users"`
}

// Defaults sets the appropriate defaults for TenantPropertiesArgs
func (val *TenantPropertiesArgs) Defaults() *TenantPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnforceSsl == nil {
		tmp.EnforceSsl = pulumi.BoolPtr(false)
	}
	if tmp.RequireUser == nil {
		tmp.RequireUser = pulumi.Bool(false)
	}
	if tmp.UpstreamSsl == nil {
		tmp.UpstreamSsl = pulumi.BoolPtr(true)
	}
	return &tmp
}
func (TenantPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantProperties)(nil)).Elem()
}

func (i TenantPropertiesArgs) ToTenantPropertiesOutput() TenantPropertiesOutput {
	return i.ToTenantPropertiesOutputWithContext(context.Background())
}

func (i TenantPropertiesArgs) ToTenantPropertiesOutputWithContext(ctx context.Context) TenantPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantPropertiesOutput)
}

type TenantPropertiesOutput struct{ *pulumi.OutputState }

func (TenantPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantProperties)(nil)).Elem()
}

func (o TenantPropertiesOutput) ToTenantPropertiesOutput() TenantPropertiesOutput {
	return o
}

func (o TenantPropertiesOutput) ToTenantPropertiesOutputWithContext(ctx context.Context) TenantPropertiesOutput {
	return o
}

// List of CIDR addresses
func (o TenantPropertiesOutput) AllowList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TenantProperties) []string { return v.AllowList }).(pulumi.StringArrayOutput)
}

// SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
func (o TenantPropertiesOutput) AuthQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantProperties) *string { return v.AuthQuery }).(pulumi.StringPtrOutput)
}

// Database name
func (o TenantPropertiesOutput) DbDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v TenantProperties) string { return v.DbDatabase }).(pulumi.StringOutput)
}

// Database host
func (o TenantPropertiesOutput) DbHost() pulumi.StringOutput {
	return o.ApplyT(func(v TenantProperties) string { return v.DbHost }).(pulumi.StringOutput)
}

// Database port
func (o TenantPropertiesOutput) DbPort() pulumi.IntOutput {
	return o.ApplyT(func(v TenantProperties) int { return v.DbPort }).(pulumi.IntOutput)
}

func (o TenantPropertiesOutput) EnforceSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TenantProperties) *bool { return v.EnforceSsl }).(pulumi.BoolPtrOutput)
}

// External ID
func (o TenantPropertiesOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantProperties) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

func (o TenantPropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o TenantPropertiesOutput) InsertedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantProperties) *string { return v.InsertedAt }).(pulumi.StringPtrOutput)
}

// auto
func (o TenantPropertiesOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantProperties) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

func (o TenantPropertiesOutput) RequireUser() pulumi.BoolOutput {
	return o.ApplyT(func(v TenantProperties) bool { return v.RequireUser }).(pulumi.BoolOutput)
}

// your.domain.com
func (o TenantPropertiesOutput) SniHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantProperties) *string { return v.SniHostname }).(pulumi.StringPtrOutput)
}

func (o TenantPropertiesOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantProperties) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func (o TenantPropertiesOutput) UpstreamSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TenantProperties) *bool { return v.UpstreamSsl }).(pulumi.BoolPtrOutput)
}

// none
func (o TenantPropertiesOutput) UpstreamVerify() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantProperties) *string { return v.UpstreamVerify }).(pulumi.StringPtrOutput)
}

func (o TenantPropertiesOutput) Users() UserArrayOutput {
	return o.ApplyT(func(v TenantProperties) []User { return v.Users }).(UserArrayOutput)
}

type User struct {
	// Database password
	DbPassword string `pulumi:"dbPassword"`
	// Database user
	DbUser string `pulumi:"dbUser"`
	// Database user alias
	DbUserAlias *string `pulumi:"dbUserAlias"`
	Id          *string `pulumi:"id"`
	InsertedAt  *string `pulumi:"insertedAt"`
	// The users who can be used for internal needs
	IsManager *bool `pulumi:"isManager"`
	// Max clients count
	MaxClients *int `pulumi:"maxClients"`
	// Pooling mode type
	ModeType *string `pulumi:"modeType"`
	// Pool checkout timeout
	PoolCheckoutTimeout *int `pulumi:"poolCheckoutTimeout"`
	// Pool size
	PoolSize int `pulumi:"poolSize"`
	// External Tenant ID
	TenantExternalId *string `pulumi:"tenantExternalId"`
	UpdatedAt        *string `pulumi:"updatedAt"`
}

// UserInput is an input type that accepts UserArgs and UserOutput values.
// You can construct a concrete instance of `UserInput` via:
//
//	UserArgs{...}
type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(context.Context) UserOutput
}

type UserArgs struct {
	// Database password
	DbPassword pulumi.StringInput `pulumi:"dbPassword"`
	// Database user
	DbUser pulumi.StringInput `pulumi:"dbUser"`
	// Database user alias
	DbUserAlias pulumi.StringPtrInput `pulumi:"dbUserAlias"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	InsertedAt  pulumi.StringPtrInput `pulumi:"insertedAt"`
	// The users who can be used for internal needs
	IsManager pulumi.BoolPtrInput `pulumi:"isManager"`
	// Max clients count
	MaxClients pulumi.IntPtrInput `pulumi:"maxClients"`
	// Pooling mode type
	ModeType pulumi.StringPtrInput `pulumi:"modeType"`
	// Pool checkout timeout
	PoolCheckoutTimeout pulumi.IntPtrInput `pulumi:"poolCheckoutTimeout"`
	// Pool size
	PoolSize pulumi.IntInput `pulumi:"poolSize"`
	// External Tenant ID
	TenantExternalId pulumi.StringPtrInput `pulumi:"tenantExternalId"`
	UpdatedAt        pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil)).Elem()
}

func (i UserArgs) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i UserArgs) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// Database password
func (o UserOutput) DbPassword() pulumi.StringOutput {
	return o.ApplyT(func(v User) string { return v.DbPassword }).(pulumi.StringOutput)
}

// Database user
func (o UserOutput) DbUser() pulumi.StringOutput {
	return o.ApplyT(func(v User) string { return v.DbUser }).(pulumi.StringOutput)
}

// Database user alias
func (o UserOutput) DbUserAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v User) *string { return v.DbUserAlias }).(pulumi.StringPtrOutput)
}

func (o UserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v User) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o UserOutput) InsertedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v User) *string { return v.InsertedAt }).(pulumi.StringPtrOutput)
}

// The users who can be used for internal needs
func (o UserOutput) IsManager() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v User) *bool { return v.IsManager }).(pulumi.BoolPtrOutput)
}

// Max clients count
func (o UserOutput) MaxClients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v User) *int { return v.MaxClients }).(pulumi.IntPtrOutput)
}

// Pooling mode type
func (o UserOutput) ModeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v User) *string { return v.ModeType }).(pulumi.StringPtrOutput)
}

// Pool checkout timeout
func (o UserOutput) PoolCheckoutTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v User) *int { return v.PoolCheckoutTimeout }).(pulumi.IntPtrOutput)
}

// Pool size
func (o UserOutput) PoolSize() pulumi.IntOutput {
	return o.ApplyT(func(v User) int { return v.PoolSize }).(pulumi.IntOutput)
}

// External Tenant ID
func (o UserOutput) TenantExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v User) *string { return v.TenantExternalId }).(pulumi.StringPtrOutput)
}

func (o UserOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v User) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) User {
		return vs[0].([]User)[vs[1].(int)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantPropertiesInput)(nil)).Elem(), TenantPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), UserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterOutputType(TenantTypeOutput{})
	pulumi.RegisterOutputType(TenantPropertiesOutput{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
}
