// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SUPAVISOR_NATIVE.Tenants.Outputs
{

    [OutputType]
    public sealed class Tenant
    {
        /// <summary>
        /// SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
        /// </summary>
        public readonly string? AuthQuery;
        /// <summary>
        /// Database name
        /// </summary>
        public readonly string DbDatabase;
        /// <summary>
        /// Database host
        /// </summary>
        public readonly string DbHost;
        /// <summary>
        /// Database port
        /// </summary>
        public readonly int DbPort;
        public readonly bool? EnforceSsl;
        /// <summary>
        /// External ID
        /// </summary>
        public readonly string? ExternalId;
        public readonly string? Id;
        public readonly string? InsertedAt;
        /// <summary>
        /// auto
        /// </summary>
        public readonly string? IpVersion;
        public readonly bool? RequireUser;
        /// <summary>
        /// your.domain.com
        /// </summary>
        public readonly string? SniHostname;
        public readonly string? UpdatedAt;
        public readonly bool? UpstreamSsl;
        /// <summary>
        /// none
        /// </summary>
        public readonly string? UpstreamVerify;
        public readonly ImmutableArray<Outputs.User> Users;

        [OutputConstructor]
        private Tenant(
            string? authQuery,

            string dbDatabase,

            string dbHost,

            int dbPort,

            bool? enforceSsl,

            string? externalId,

            string? id,

            string? insertedAt,

            string? ipVersion,

            bool? requireUser,

            string? sniHostname,

            string? updatedAt,

            bool? upstreamSsl,

            string? upstreamVerify,

            ImmutableArray<Outputs.User> users)
        {
            AuthQuery = authQuery;
            DbDatabase = dbDatabase;
            DbHost = dbHost;
            DbPort = dbPort;
            EnforceSsl = enforceSsl;
            ExternalId = externalId;
            Id = id;
            InsertedAt = insertedAt;
            IpVersion = ipVersion;
            RequireUser = requireUser;
            SniHostname = sniHostname;
            UpdatedAt = updatedAt;
            UpstreamSsl = upstreamSsl;
            UpstreamVerify = upstreamVerify;
            Users = users;
        }
    }
}
